const { Telegraf } = require("telegraf");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const os = require("os");

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const spellsPath = path.resolve(__dirname, "spells.txt");
const potionsPath = path.resolve(__dirname, "potions.txt");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function readList(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return ["–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"];
    }

    const data = fs.readFileSync(filePath, "utf-8");
    const lines = data.split("\n").filter(Boolean);

    if (lines.length === 0) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –ø—É—Å—Ç.`);
      return ["–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"];
    }

    return lines;
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, e.message);
    return ["–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"];
  }
}

// 20 —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
const Randomizers = {
  // 1. –ü—Ä–æ—Å—Ç–æ Math.random()
  basic(list) {
    return list[Math.floor(Math.random() * list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 2. –° –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Date.now()
  timeBased(list) {
    const seed = Date.now();
    return list[Math.floor(seed % list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º process.hrtime()
  hrtimeBased(list) {
    const time = process.hrtime();
    return list[Math.floor((time[0] * 1e9 + time[1]) % list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto.randomInt()
  cryptoBased(list) {
    return list[crypto.randomInt(0, list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 5. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto + Date.now()
  cryptoAndTime(list) {
    const seed = crypto.randomBytes(4).readUInt32LE(0) + Date.now();
    return list[Math.floor(seed % list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 6. –ò—Å–ø–æ–ª—å–∑—É–µ–º os.freemem()
  memoryBased(list) {
    const seed = os.freemem() + Date.now();
    return list[Math.floor(seed % list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 7. –ò—Å–ø–æ–ª—å–∑—É–µ–º os.totalmem()
  totalMemBased(list) {
    const seed = os.totalmem() + Date.now();
    return list[Math.floor(seed % list.length)] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 8. –•—ç—à–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  fileHashBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const hash = crypto.createHash("sha256").update(data).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 9. –ò—Å–ø–æ–ª—å–∑—É–µ–º fs.stat + –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
  fileMtimeBased(list, filePath) {
    const stats = fs.statSync(filePath);
    const seed = stats.mtimeMs + Date.now();
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 10. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto + hash
  cryptoHashBased(list) {
    const hash = crypto.createHash("sha1").update(Date.now().toString()).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 11. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto.randomBytes –Ω–∞–ø—Ä—è–º—É—é
  cryptoBytesBased(list) {
    const buffer = crypto.randomBytes(4);
    const seed = buffer.readUInt32LE(0);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 12. –ò—Å–ø–æ–ª—å–∑—É–µ–º uuid
  uuidBased(list) {
    const { v4: uuidv4 } = require("uuid");
    const id = uuidv4();
    return list[id.charCodeAt(0) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 13. –ò—Å–ø–æ–ª—å–∑—É–µ–º uuid + hash
  uuidHashBased(list) {
    const { v4: uuidv4 } = require("uuid");
    const id = uuidv4();
    const hash = crypto.createHash("sha256").update(id).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 14. –ò—Å–ø–æ–ª—å–∑—É–µ–º process.pid + Date.now()
  pidTimeBased(list) {
    const seed = process.pid * Date.now();
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 15. –ò—Å–ø–æ–ª—å–∑—É–µ–º fs.readFileSync + crypto
  fileCryptoBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const hash = crypto.createHash("sha1").update(data + Date.now()).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 16. –ò—Å–ø–æ–ª—å–∑—É–µ–º fs.readFileSync + Date.now()
  fileTimeBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const seed = data.length + Date.now();
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 17. –ò—Å–ø–æ–ª—å–∑—É–µ–º fs.readFileSync + os.totalmem()
  fileMemBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const seed = data.length + os.totalmem();
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 18. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto + hash —Ñ–∞–π–ª–∞
  cryptoFileHashBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const hash = crypto.createHash("sha1").update(data).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16) + Date.now();
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 19. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto + hash + os
  cryptoOsBased(list) {
    const entropy = Date.now() + os.totalmem();
    const hash = crypto.createHash("sha1").update(entropy.toString()).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },

  // 20. –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto + os + fs
  fullEntropyBased(list, filePath) {
    const data = fs.readFileSync(filePath);
    const entropy = Date.now() + os.freemem() + data.length;
    const hash = crypto.createHash("sha1").update(entropy.toString()).digest("hex");
    const seed = parseInt(hash.slice(0, 8), 16);
    return list[Math.abs(seed) % list.length] || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
  },
};

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ @XogsmidBot, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∑–µ–ª—å—è–º–∏.");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–∞
bot.inlineQuery(/.*/, (ctx) => {
  const spells = readList(spellsPath);
  const potions = readList(potionsPath);

  // –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥:
  const randomSpell = Randomizers.fullEntropyBased(spells, spellsPath);
  const randomPotion = Randomizers.cryptoBytesBased(potions);

  const results = [
    {
      type: "article",
      id: "spell",
      title: "–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
      input_message_content: {
        message_text: `ü™Ñ ${randomSpell}`,
      },
    },
    {
      type: "article",
      id: "potion",
      title: "–°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ",
      input_message_content: {
        message_text: `üß™ ${randomPotion}`,
      },
    },
  ];

  ctx.answerInlineQuery(results);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = parseInt(process.env.PORT) || 10000;
const DOMAIN = process.env.RENDER_EXTERNAL_URL || "https://xogsmid-render-bot.onrender.com ";

bot.launch({
  webhook: {
    host: "0.0.0.0",
    port: PORT,
    path: "/bot",
    domain: DOMAIN,
  },
});

console.log(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
console.log(`üåê Webhook URL: ${DOMAIN}/bot`);
